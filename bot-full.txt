     1	// api/bot.js
     2	const axios = require('axios');
     3	const { kv } = require('@vercel/kv');
     4	// --- admin session (KV) ---
     5	const ADMIN_SESS_PREFIX = 'admin:sess:';
     6	async function adminSessionGet(uid){ try{ return (await kv.get(ADMIN_SESS_PREFIX+uid)) || null; }catch(_){ return null; } }
     7	async function adminSessionSet(uid, obj){ try{ await kv.set(ADMIN_SESS_PREFIX+uid, obj); }catch(_){ } }
     8	async function adminSessionClear(uid){ try{ await kv.del(ADMIN_SESS_PREFIX+uid); }catch(_){ } }
     9	
    10	
    11	
    12	
    13	function prettyErr(e){
    14	  try{
    15	    if (e && e.response){
    16	      const status = e.response.status;
    17	      let payload = e.response.data;
    18	      if (typeof payload !== 'string') payload = JSON.stringify(payload);
    19	      if (payload && payload.length > 1200) payload = payload.slice(0,1200) + '…';
    20	      return 'HTTP '+status+' — '+payload;
    21	    }
    22	    return String(e && e.message || e);
    23	  }catch(_){ return String(e); }
    24	}
    25	const { preview, apply, rollback, currentDataVersion } = require('./_patchEngine');
    26	const PATCH_SECRET = '';
    27	const BOT = () => {
    28	  const token = process.env.TELEGRAM_BOT_TOKEN;
    29	  return axios.create({ baseURL: `https://api.telegram.org/bot${token}` });
    30	};
    31	
    32	module.exports = async (req, res) => {
    33	  try {
    34	    if (req.method !== 'POST') { res.statusCode = 405; return res.end('Method Not Allowed'); }
    35	    const secretHeader = req.headers['x-telegram-bot-api-secret-token'];
    36	    if (process.env.TELEGRAM_WEBHOOK_SECRET && secretHeader && secretHeader !== process.env.TELEGRAM_WEBHOOK_SECRET) {
    37	      res.statusCode = 401; return res.end('Unauthorized');
    38	    }
    39	    const update = await readJson(req);
    40	    try { const t = update.callback_query?'callback_query':(update.message?'message':'?'); console.log('[BOT] update type=', t, 'keys=', Object.keys(update||{})); } catch(_){}
    41	    if (update.callback_query) {
    42	      await onCallbackQuery(update.callback_query);
    43	    } else if (update.message) {
    44	      await onMessage(update.message);
    45	    }
    46	    res.statusCode = 200; res.end('OK');
    47	  } catch { res.statusCode = 200; res.end('OK'); }
    48	};
    49	
    50	async function readJson(req) {
    51	  return new Promise((resolve) => {
    52	    let data=''; req.on('data',c=>data+=c); req.on('end',()=>{ try{resolve(JSON.parse(data||'{}'))}catch{resolve({})} });
    53	  });
    54	}
    55	function isAdmin(userId, settings) { const list=settings?.admins||[]; return list.includes(String(userId)); }
    56	async function send(text, chat_id, inlineKb, plain=false){
    57	  return BOT().post('/sendMessage',{ chat_id, text, reply_markup: inlineKb ? { inline_keyboard: inlineKb } : undefined });
    58	}
    59	function userHomeKb(){
    60	  const webappUrl=process.env.WEBAPP_URL;
    61	  return { keyboard:[ [{text:'Description'},{text:'FAQ'}], [{text:'Menu', web_app:{url:webappUrl}}] ], resize_keyboard:true };
    62	}
    63	async function sendHome(chatId){
    64	  await BOT().post('/sendMessage',{ chat_id:chatId, text:'Bienvenue ! Choisis une option :', reply_markup: userHomeKb() });
    65	}
    66	async function getFileUrl(fileId){
    67	  const r=await BOT().get('/getFile',{ params:{ file_id:fileId }});
    68	  const path=r.data?.result?.file_path; const token=process.env.TELEGRAM_BOT_TOKEN;
    69	  if (!path) return null; return `https://api.telegram.org/file/bot${token}/${path}`;
    70	}
    71	
    72	/** ===== Menus Admin ===== **/
    73	function adminRootKb(){
    74	  return [
    75	    [{ text:'🛒 Produits', callback_data:'admin:cat_products' }],
    76	    [{ text:'📝 Textes', callback_data:'admin:cat_texts' }],
    77	    [{ text:'🎨 Branding', callback_data:'admin:cat_branding' }],
    78	    [{ text:'🔐 Accès', callback_data:'admin:cat_access' }],
    79	    [{ text:'📦 Formulaire', callback_data:'admin:cat_form' }],
    80	    [{ text:'📞 Contact', callback_data:'admin:cat_contact' }],
    81	    [{ text:'👑 Admins', callback_data:'admin:cat_admins' }],
    82	    [{ text:'📈 Rapports', callback_data:'admin:cat_reports' }],
    83	    [{ text:'🧩 Patchs', callback_data:'admin:cat_patches' }]
    84	  ];
    85	}
    86	
    87	function adminProductsKb(){
    88	  return [
    89	    [{ text:'📋 Lister', callback_data:'admin:prod_list' }],
    90	    [{ text:'➕ Ajouter', callback_data:'admin:add_product' }],
    91	    [{ text:'✏️ Modifier', callback_data:'admin:edit_product' }],
    92	    [{ text:'🗑️ Supprimer', callback_data:'admin:delete_product' }],
    93	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
    94	  ];
    95	}
    96	function adminTextsKb(){
    97	  return [
    98	    [{ text:'✏️ Description', callback_data:'admin:set_description' }],
    99	    [{ text:'✏️ FAQ', callback_data:'admin:set_faq' }],
   100	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   101	  ];
   102	}
   103	function adminBrandingKb(){
   104	  return [
   105	    [{ text:'🖼️ Logo', callback_data:'admin:set_logo' }, { text:'🖼️ Fond', callback_data:'admin:set_bg' }],
   106	    [{ text:'♻️ Revenir au fond par défaut', callback_data:'admin:reset_bg' }],
   107	    [{ text:'🏷️ Nom boutique', callback_data:'admin:set_name' }],
   108	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   109	  ];
   110	}
   111	function adminAccessKb(){
   112	  return [
   113	    [{ text:'Rendre PUBLIC', callback_data:'admin:set_access:public' }],
   114	    [{ text:'Rendre PRIVÉ', callback_data:'admin:set_access:private' }],
   115	    [{ text:'Canaux privés (ajouter/supprimer)', callback_data:'admin:channels_manage' }],
   116	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   117	  ];
   118	}
   119	function adminFormKb(fields){
   120	  const f=fields||{};
   121	  return [
   122	    [{ text:`Prénom: ${f.firstname?'✅':'❌'}`, callback_data:'admin:form_toggle:firstname' }, { text:`Nom: ${f.lastname?'✅':'❌'}`, callback_data:'admin:form_toggle:lastname' }],
   123	    [{ text:`Adresse: ${f.address1?'✅':'❌'}`, callback_data:'admin:form_toggle:address1' }],
   124	    [{ text:`CP: ${f.postalCode?'✅':'❌'}`, callback_data:'admin:form_toggle:postalCode' }, { text:`Ville: ${f.city?'✅':'❌'}`, callback_data:'admin:form_toggle:city' }],
   125	    [{ text:`Pays: ${f.country?'✅':'❌'}`, callback_data:'admin:form_toggle:country' }],
   126	    [{ text:'🔁 Réinitialiser', callback_data:'admin:form_reset' }],
   127	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   128	  ];
   129	}
   130	function adminContactKb(){
   131	  return [
   132	    [{ text:'✏️ Contact Telegram', callback_data:'admin:set_contact' }],
   133	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   134	  ];
   135	}
   136	function adminAdminsKb(){
   137	  return [
   138	    [{ text:'📋 Lister', callback_data:'admin:admins_list' }],
   139	    [{ text:'➕ Ajouter', callback_data:'admin:admin_add' }, { text:'🗑️ Retirer', callback_data:'admin:admin_remove' }],
   140	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
   141	  ];
   142	}
   143	function kbConfirm(extra=[]) {
   144	  return [[
   145	    { text:'✅ Valider', callback_data:'ok' },
   146	    { text:'🔄 Revenir', callback_data:'back' },
   147	    { text:'✖️ Annuler', callback_data:'cancel' },
   148	    ...extra
   149	  ]];
   150	}
   151	function kbMedia(){
   152	  return [[
   153	    { text:'➕ Ajouter d’autres médias', callback_data:'more_media' },
   154	    { text:'🧹 Vider médias', callback_data:'clear_media' },
   155	    { text:'➡️ Terminer', callback_data:'finish_media' }
   156	  ],[
   157	    { text:'✖️ Annuler', callback_data:'cancel' }
   158	  ]];
   159	}
   160	
   161	/** ===== Callbacks ===== **/
   162	async function onCallbackQuery(cbq){
   163	  const chatId=cbq.message?.chat?.id; const userId=cbq.from?.id; const data=cbq.data||'';
   164	  try { await BOT().post('/answerCallbackQuery',{ callback_query_id: cbq.id }); } catch (_) {}
   165	  let settings=await kv.get('settings');
   166	  if (!settings){ settings={admins:[String(userId)]}; await kv.set('settings', settings); }
   167	  if (!isAdmin(userId, settings)) { await send('Accès admin requis.', chatId, null, true); return; }
   168	
   169	  // Root & catégories
   170	  if (data==='admin:root'){ await send('Panneau admin :', chatId, adminRootKb()); return; }
   171	  if (data==='admin:cat_products'){ await send('Produits :', chatId, adminProductsKb()); return; }
   172	  if (data==='admin:cat_texts'){ await send('Textes :', chatId, adminTextsKb()); return; }
   173	  if (data==='admin:cat_branding'){ await send('Branding :', chatId, adminBrandingKb()); return; }
   174	  if (data==='admin:cat_access'){ await send('Accès :', chatId, adminAccessKb()); return; }
   175	  if (data==='admin:cat_form'){
   176	    const fields = (settings.deliveryForm?.fields) || {};
   177	    await send('Formulaire de livraison (activer/désactiver champs) :', chatId, adminFormKb(fields)); return;
   178	  }
   179	  if (data==='admin:cat_contact'){ await send('Contact :', chatId, adminContactKb()); return; }
   180	  if (data==='admin:cat_admins'){ await send('Admins :', chatId, adminAdminsKb()); return; }
   181	
   182	  if (data==='admin:cat_patches'){
   183	    const sess = await adminSessionGet(userId);
   184	    const showUp = !!(sess && sess.flow==='patch' && sess.step==='applied');
   185	    await send('🧩 Patchs :', chatId, adminPatchesKb(showUp));
   186	    return;
   187	  }
   188	  if (data==='admin:version'){ await handleVersion(chatId); return; }
   189	  if (data==='admin:patch_wait'){
   190	    await adminSessionSet(userId,{ flow:'patch', step:'wait_doc' });
   191	    await send('Envoie le fichier JSON du patch (comme *Document*).', chatId, adminPatchesKb(false));
   192	    return;
   193	  }
   194	  if (data==='admin:patch_history'){
   195	    try{
   196	      const hist = (await kv.get('patch:history')) || [];
   197	      if (!hist.length){ await send('Aucun patch appliqué pour le moment.', chatId, adminPatchesKb(false)); return; }
   198	      const lines = hist.slice(-10).map(h=>`• ${h.at||'-'} : ${h.from||'?'} → ${h.to||'?'} ${h.rollback?'(rollback)':''}`).join('\n');
   199	      await send(`<b>Derniers patchs</b>\n${lines}`, chatId, adminPatchesKb(true));
   200	    }catch(e){ await send('Erreur historique: '+(e&&e.message||e), chatId); }
   201	    return;
   202	  }
   203	
   204	
   205	  if (data==='admin:cat_patches'){ await send('🧩 Patchs :', chatId, adminPatchesKb()); return; }
   206	  if (data==='admin:version'){ await handleVersion(chatId); return; }
   207	  if (data==='admin:upgrade'){ await handleUpgrade(chatId, userId); return; }
   208	  if (data==='admin:patch_wait'){
   209	    await adminSessionSet(userId,{ flow:'patch', step:'wait_doc' });
   210	    await send('Envoie maintenant le fichier JSON du patch (comme *Document*).', chatId, adminPatchesKb());
   211	    return;
   212	  }
   213	
   214	
   215	  // Rapports (menu + boutons)
   216	  if (data==='admin:cat_reports'){ await send('📈 Rapports — choisis une période :', chatId, adminReportsKb()); return; }
   217	  if (data.startsWith('admin:reports:range:')){
   218	    try {
   219	      const kind = data.split(':').pop();
   220	      await handleReports(chatId, kind);
   221	    } catch (e) {
   222	      await send('Erreur rapports: ' + String(e && e.message || e), chatId);
   223	    }
   224	    return;
   225	  }
   226	
   227	  // Produits
   228	  if (data==='admin:prod_list'){
   229	  const products = (await kv.get('products')) || [];
   230	  if (!products.length){
   231	    await send('Produits actifs
   232	
   233	(aucun)', chatId, adminProductsKb());
   234	    return;
   235	  }
   236	
   237	  const lines = products.map(function(p){
   238	    const medias = Array.isArray(p && p.media) ? p.media.length : 0;
   239	    if (Array.isArray(p.quantities) && p.quantities.length > 0){
   240	      const qs = (p.quantities||[]).map(function(v){
   241	        const lb = String((v && v.label) || '');
   242	        const pc = Number((v && v.price_cash) || 0);
   243	        const pr = Number((v && v.price_crypto) || 0);
   244	        return '  - ' + lb + ': ' + pc + ' € / ' + pr + ' €';
   245	      }).join('\n');
   246	      return '• ' + String(p.name) + ' (' + String(p.id) + ')\n'            + 'Tarifs:\n' + qs + '\n'            + 'Médias: ' + medias + '\n'            + 'Desc: ' + (p.description||'-');
   247	    } else {
   248	      const unit = p.unit || '1u';
   249	      const pc = Number(p.price_cash||0), pr = Number(p.price_crypto||0);
   250	      return '• ' + String(p.name) + ' (' + String(p.id) + ')\n'            + 'Tarif: ' + unit + ' — ' + pc + ' € / ' + pr + ' €\n'            + 'Médias: ' + medias + '\n'            + 'Desc: ' + (p.description||'-');
   251	    }
   252	  }).join('\n\n');
   253	
   254	  await send('Produits actifs\n\n' + lines, chatId, adminProductsKb());
   255	  return;
   256	}
   257	
   258	  const lines = products.map(function(p){
   259	    const medias = Array.isArray(p && p.media) ? p.media.length : 0;
   260	
   261	    if (Array.isArray(p.quantities) && p.quantities.length > 0){
   262	      const qs = (p.quantities||[]).map(function(v){
   263	        const lb = String((v && v.label) || '');
   264	        const pc = Number((v && v.price_cash) || 0);
   265	        const pr = Number((v && v.price_crypto) || 0);
   266	        return '  - ' + lb + ': ' + pc + ' € / ' + pr + ' €';
   267	      }).join('\n');
   268	      return '• ' + String(p.name) + ' (' + String(p.id) + ')\n'
   269	           + 'Tarifs:\n' + qs + '\n'
   270	           + 'Médias: ' + medias + '\n'
   271	           + 'Desc: ' + (p.description||'-');
   272	    } else {
   273	      const unit = p.unit || '1u';
   274	      const pc = Number(p.price_cash||0), pr = Number(p.price_crypto||0);
   275	      return '• ' + String(p.name) + ' (' + String(p.id) + ')\n'
   276	           + 'Tarif: ' + unit + ' — ' + pc + ' € / ' + pr + ' €\n'
   277	           + 'Médias: ' + medias + '\n'
   278	           + 'Desc: ' + (p.description||'-');
   279	    }
   280	  }).join('\n\n');
   281	
   282	  await send('Produits actifs\n\n' + lines, chatId, adminProductsKb());
   283	  return;
   284	}
   285	
   286	  const lines = products.map(p=>{
   287	    const medias = (p.media||[]).length;
   288	    if (Array.isArray(p.quantities) && p.quantities.length>0){
   289	      const qs = (p.quantities||[]).map(v=>{
   290	        const lb = String(v?.label||'');
   291	        const pc = Number(v?.price_cash||0);
   292	        const pr = Number(v?.price_crypto||0);
   293	        return `  - ${lb}: ${pc} € / ${pr} €`;
   294	      }).join('\n');
   295	      return `• ${p.name} (${p.id})
   296	Tarifs:
   297	${qs}
   298	Médias: ${medias}
   299	Desc: ${p.description||'-'}`;
   300	    } else if (field==='quantities') {
   301	      // FIXME: removed stray await (was outside async)
   302	      await send('Nouvelle liste de variantes — libellé de la 1ère ?', chatId); 
   303	    } else {
   304	      const unit = p.unit || '1u';
   305	      const pc = Number(p.price_cash||0), pr = Number(p.price_crypto||0);
   306	      return `• ${p.name} (${p.id})
   307	Tarif: ${unit} — ${pc} € / ${pr} €
   308	Médias: ${medias}
   309	Desc: ${p.description||'-'}`;
   310	    }
   311	  }).join('\n');
   312	
   313	  await send(`Produits actifs
   314	
   315	${lines}`, chatId, adminProductsKb());
   316	  return;
   317	}
   318	    // (obsolete listing removed) const blocks=products.map(p=>{
   319	      const mediaCount=(p.media||[]).length;
   320	      return `• <b>${p.name}</b> (${p.id})\n  Unité: ${p.unit||'-'} | Cash: ${p.price_cash} € | Crypto: ${p.price_crypto} €\n  Médias: ${mediaCount}\n  Desc: ${p.description||'-'}`;
   321	    }).join('\n\n');
   322	    await send(`<b>Produits actifs</b>\n\n${blocks}`, chatId, adminProductsKb()); return;
   323	  }
   324	  if (data==='admin:add_product'){
   325	    await adminSessionSet(userId,{ flow:'add_product', step:'name', payload:{ media:[] } });
   326	    await send('Nom du produit ?', chatId); return;
   327	  }
   328	  if (data==='admin:edit_product'){
   329	    await adminSessionSet(userId,{ flow:'edit_product', step:'ask_id' });
   330	    await send('ID ou nom du produit à modifier ?', chatId); return;
   331	  }
   332	  if (data.startsWith('admin:edit_field:')){
   333	    const field = data.split(':')[2];
   334	    const sess=await adminSessionGet(userId);
   335	    if (!sess || sess.flow!=='edit_product' || !sess.payload?.id) return;
   336	    if (field==='media'){
   337	      sess.step='media'; sess.payload.newMedia=[]; await adminSessionSet(userId, sess);
   338	      await send('Envoie des <b>photos/vidéos</b>.\nTu peux vider d’abord les médias existants avec 🧹 puis ajouter.\nQuand c’est bon : ➡️ Terminer.', chatId, kbMedia());
   339	    } else if (field==='quantities') {
   340	      // FIXME: removed stray await (was outside async)
   341	      await send('Nouvelle liste de variantes — libellé de la 1ère ?', chatId); 
   342	    } else {
   343	      sess.step='field_val'; sess.payload.field=field; await adminSessionSet(userId, sess);
   344	      const labelMap={name:'Nom',description:'Description',unit:'Unité',price_cash:'Prix cash (€)',price_crypto:'Prix crypto (€)'};
   345	      await send(`${labelMap[field]||field} ?`, chatId, kbConfirm());
   346	    }
   347	    return;
   348	  }
   349	
   350	  // Supprimer un produit
   351	  if (data==='admin:delete_product'){
   352	    await adminSessionSet(userId,{ flow:'delete_product', step:'ask', payload:{} });
   353	    await send('ID ou nom du produit à supprimer ?', chatId); return;
   354	  }
   355	
   356	  // Textes
   357	  if (data==='admin:set_description'){
   358	    await adminSessionSet(userId,{ flow:'set_description', step:'text' });
   359	    await send('Envoie la <b>Description</b> complète.', chatId); return;
   360	  }
   361	  if (data==='admin:set_faq'){
   362	    await adminSessionSet(userId,{ flow:'set_faq', step:'text' });
   363	    await send('Envoie la <b>FAQ</b> complète.', chatId); return;
   364	  }
   365	
   366	  // Branding
   367	  if (data==='admin:set_logo'){
   368	    await adminSessionSet(userId,{ flow:'set_logo', step:'wait_media' });
   369	    await send('Envoie une <b>photo</b> pour le logo.', chatId); return;
   370	  }
   371	  if (data==='admin:set_bg'){
   372	    await adminSessionSet(userId,{ flow:'set_bg', step:'wait_media' });
   373	    await send('Envoie une <b>photo</b> pour le fond d’écran.', chatId); return;
   374	  }
   375	  if (data==='admin:reset_bg'){
   376	    const s=(await kv.get('settings'))||{}; delete s.bgUrl; await kv.set('settings', s);
   377	    await send('✅ Fond d’écran réinitialisé (valeur par défaut).', chatId, adminBrandingKb()); return;
   378	  }
   379	  if (data==='admin:set_name'){
   380	    await adminSessionSet(userId,{ flow:'set_name', step:'ask' });
   381	    await send('Nom de la boutique ?', chatId); return;
   382	  }
   383	
   384	  // Accès (public/privé + canaux)
   385	  if (data==='admin:set_access:public' || data==='admin:set_access:private'){
   386	    settings.privateMode = data.endsWith(':private');
   387	    await kv.set('settings', settings);
   388	    await send(`Mode d'accès défini: <b>${settings.privateMode ? 'Privé' : 'Public'}</b>`, chatId, adminAccessKb()); return;
   389	  }
   390	  if (data==='admin:channels_manage'){
   391	    await adminSessionSet(userId,{ flow:'channels', step:'menu' });
   392	    const list = (settings.channels||[]).join('\n• ');
   393	    await send(`Canaux privés:\n${list? '• '+list : '(aucun)'}\n\nEnvoyer @canal pour ajouter, ou "supprimer @canal" pour retirer.`, chatId); return;
   394	  }
   395	
   396	  // Formulaire (toggle champs)
   397	  if (data.startsWith('admin:form_toggle:')){
   398	    const key = data.split(':').pop();
   399	    settings.deliveryForm = settings.deliveryForm || { fields:{} };
   400	    settings.deliveryForm.fields = settings.deliveryForm.fields || {};
   401	    settings.deliveryForm.fields[key] = !settings.deliveryForm.fields[key];
   402	    await kv.set('settings', settings);
   403	    await send('Formulaire mis à jour :', chatId, adminFormKb(settings.deliveryForm.fields)); return;
   404	  }
   405	  if (data==='admin:form_reset'){
   406	    settings.deliveryForm = { fields: { firstname:true, lastname:true, address1:true, postalCode:true, city:true, country:true } };
   407	    await kv.set('settings', settings);
   408	    await send('✅ Formulaire réinitialisé.', chatId, adminFormKb(settings.deliveryForm.fields)); return;
   409	  }
   410	
   411	  // Contact
   412	  if (data==='admin:set_contact'){
   413	    await adminSessionSet(userId,{ flow:'set_contact', step:'ask' });
   414	    await send('Envoie le @username du contact (sans lien).', chatId); return;
   415	  }
   416	
   417	  // Admins
   418	  if (data==='admin:admins_list'){
   419	    const admins = (settings.admins||[]).map(id=>`• ${id}`).join('\n') || '(aucun)';
   420	    await send(`<b>Admins</b>\n${admins}`, chatId, adminAdminsKb()); return;
   421	  }
   422	  if (data==='admin:admin_add'){
   423	    await adminSessionSet(userId,{ flow:'admins', step:'add' });
   424	    await send('Envoie l’ID numérique Telegram de l’admin à ajouter.', chatId); return;
   425	  }
   426	  if (data==='admin:admin_remove'){
   427	    await adminSessionSet(userId,{ flow:'admins', step:'remove' });
   428	    await send('Envoie l’ID numérique Telegram de l’admin à retirer.', chatId); return;
   429	  }
   430	
   431	  // Media helpers
   432	  const sess=await adminSessionGet(userId);
   433	  if (data==='more_media'){
   434	    if (sess && (sess.flow==='add_product' || (sess.flow==='edit_product' && sess.step==='media'))) {
   435	      await adminSessionSet(userId, {...sess, step:'media'});
   436	      await send('Envoie d’autres <b>photos/vidéos</b>.\nQuand c’est bon : ➡️ Terminer.', chatId, kbMedia());
   437	    }
   438	    return;
   439	  }
   440	  if (data==='clear_media'){
   441	    if (sess?.flow==='edit_product' && sess.step==='media'){
   442	      sess.payload.clearFirst = true;
   443	      sess.payload.newMedia = [];
   444	      await adminSessionSet(userId, sess);
   445	      await send('🧹 Médias existants seront vidés. Ajoute maintenant les nouveaux, puis ➡️ Terminer.', chatId, kbMedia());
   446	    }
   447	    return;
   448	  }
   449	  if (data==='finish_media'){
   450	    if (sess?.flow==='add_product'){
   451	      const p=sess.payload;
   452	      const recap=[
   453	        `• Nom: ${p.name}`,
   454	        `• Desc: ${p.description}`,
   455	        `• Unité: ${p.unit}`,
   456	        `• Cash: ${p.price_cash} € | Crypto: ${p.price_crypto} €`,
   457	        `• Médias: ${p.media?.length||0}`
   458	      ].join('\n');
   459	      await adminSessionSet(userId, {...sess, step:'confirm'});
   460	      await send(`<b>Récap</b>\n${recap}`, chatId, kbConfirm());
   461	    } else if (sess?.flow==='edit_product' && sess.step==='media'){
   462	      const products=(await kv.get('products'))||[];
   463	      const idx=products.findIndex(p=>p.id===sess.payload.id);
   464	      if (idx<0){ await send('Produit introuvable.', chatId); return; }
   465	      if (sess.payload.clearFirst) products[idx].media = [];
   466	      products[idx].media = products[idx].media || [];
   467	      products[idx].media.push(...(sess.payload.newMedia||[]));
   468	      await kv.set('products', products);
   469	      await adminSessionClear(userId);
   470	      await send('✅ Médias du produit mis à jour.', chatId, adminProductsKb());
   471	    }
   472	    return;
   473	  }
   474	
   475	  // Confirmations génériques
   476	  if (data==='ok'){
   477	    if (sess?.flow==='add_product' && sess.step==='confirm'){
   478	      const products=(await kv.get('products'))||[];
   479	      const p=sess.payload; p.id=p.id||('p'+Math.random().toString(36).slice(2,8)); p.media=p.media||[];
   480	      products.push(p); await kv.set('products', products);
   481	      await adminSessionClear(userId);
   482	      await send('✅ Produit ajouté.', chatId, adminProductsKb()); return;
   483	    }
   484	    if (sess?.flow==='delete_product' && sess.step==='confirm'){
   485	      let products=(await kv.get('products'))||[]; const before=products.length;
   486	      products=products.filter(x=>x.id!==sess.payload.id); await kv.set('products', products);
   487	      await adminSessionClear(userId);
   488	      await send(before===products.length?'Aucun produit supprimé.':'✅ Produit supprimé.', chatId, adminProductsKb()); return;
   489	    }
   490	  }
   491	  if (data==='back'){
   492	    if (sess?.flow==='add_product'){
   493	      if (sess.step==='confirm'){ await adminSessionSet(userId,{...sess, step:'crypto'}); await send('Prix crypto (€) ?', chatId); }
   494	      else if (sess.step==='crypto'){ await adminSessionSet(userId,{...sess, step:'price'}); await send('Prix cash (€) ?', chatId); }
   495	      else if (sess.step==='price'){ await adminSessionSet(userId,{...sess, step:'unit'}); await send('Unité (ex: 1u = 100g) ?', chatId); }
   496	      else if (sess.step==='unit'){ await adminSessionSet(userId,{...sess, step:'desc'}); await send('Description ?', chatId); }
   497	      else if (sess.step==='desc'){ await adminSessionSet(userId,{...sess, step:'name'}); await send('Nom du produit ?', chatId); }
   498	      return;
   499	    }
   500	  }
   501	  if (data==='cancel'){ await adminSessionClear(userId); await send('✖️ Flow annulé.', chatId, adminRootKb()); return; }
   502	}
   503	
   504	/** ===== Messages ===== **/
   505	
   506	async function onMessage(msg){
   507	// ---- DIAG DOC ----
   508	  try {
   509	    console.log('[BOT] onMessage keys=', Object.keys(msg||{}));
   510	    if (msg && msg.document) {
   511	      const name = (msg.document.file_name||'inconnu');
   512	      try { await send('📄 Doc reçu: '+name+' — traitement…', msg.chat.id); } catch(_){}
   513	    }
   514	  } catch(_){}
   515	
   516	  // Rattrapage: si un ADMIN envoie un document, on traite le patch directement
   517	  try{
   518	    if (msg && msg.document){
   519	      const s = (await kv.get('settings')) || {};
   520	      if (isAdmin(msg.from?.id, s)) { await handlePatchDocument(msg); return; }
   521	    }
   522	  }catch(_){/* ignore */}
   523	  // --- Raccourcis commandes ---
   524	  if (msg && msg.document && (msg.caption||"").trim()==="/patch") { await handlePatchDocument(msg); return; }
   525	  if (msg && msg.text && msg.text.startsWith("/rollback ")) { const v=(msg.text||"").split(" ")[1]; await handleRollback(msg.chat.id, msg.from.id, v); return; }
   526	  if (msg && msg.text && (msg.text||"").trim()==="/version") { await handleVersion(msg.chat.id); return; }
   527	  if (msg && msg.text && (msg.text||"").trim()==="/upgrade") { await handleUpgrade(msg.chat.id, msg.from.id); return; }
   528	
   529	  // --- Mode 'Appliquer un patch' : accepte Document OU JSON en texte ---
   530	  try{
   531	    const __sessPatch = await adminSessionGet(msg.from.id);
   532	    if (__sessPatch && __sessPatch.flow==='patch' && __sessPatch.step==='wait_doc'){
   533	      if (msg.document){
   534	        await handlePatchDocument(msg);
   535	        await adminSessionClear(msg.from.id);
   536	        return;
   537	      }
   538	      if (typeof msg.text==='string'){
   539	        const t = msg.text.trim();
   540	        if (t.startsWith('{') && t.endsWith('}')){
   541	          try{
   542	            const manifest = JSON.parse(t);
   543	            const p = await preview(manifest, PATCH_SECRET);
   544	            await send(`PREVIEW OK\n${p.summary}\nCurrent: ${p.currentVersion}\nKeys: ${p.willWriteKeys.join(', ')}`, msg.chat.id);
   545	            const r = await apply(manifest, String(msg.from.id), PATCH_SECRET);
   546	            await send(`Patch applied. Backup: backup:${manifest.version}`, msg.chat.id);
   547	            await adminSessionSet(msg.from.id,{ flow:'patch', step:'applied' });
   548	            await send('Patch appliqué. Tu peux lancer un 🚀 Upgrade si besoin.', msg.chat.id, adminPatchesKb(true));
   549	            return;
   550	          }catch(e){
   551	            await send('Patch error (text): ' + (e && e.message || e), msg.chat.id);
   552	            return;
   553	          }
   554	        }
   555	      }
   556	    }
   557	  }catch(_){}
   558	
   559	  // --- Flux standard ---
   560	  const chatId=msg.chat?.id; const fromId=msg.from?.id; let text=(msg.text||'').trim();
   561	
   562	  let settings=await kv.get('settings');
   563	  if (!settings){
   564	    settings = {
   565	      shopName:'Boutique',
   566	      description:'Bienvenue dans la boutique. Produits démo.',
   567	      faq:'Q: Livraison ?\nR: Par colis.\n\nQ: Paiement ?\nR: Cash ou crypto (redirigé vers contact humain en V1).',
   568	      contactUsername:'TonContactHumain',
   569	      privateMode:false, requiredChannel:'', channels:[],
   570	      admins:[ String(fromId) ],
   571	      deliveryForm:{ fields:{ firstname:true, lastname:true, address1:true, postalCode:true, city:true, country:true } }
   572	    };
   573	    await kv.set('settings', settings);
   574	  }
   575	
   576	  if (['/start','FAQ','Description','Menu','/faq','/description','/menu'].includes(text)) {
   577	    await adminSessionClear(fromId);
   578	    if (text==='/start' || text==='Menu' || text==='/menu') { await sendHome(chatId); return; }
   579	    if (text==='FAQ' || text==='/faq') { await send(settings.faq||'—', chatId); return; }
   580	    if (text==='Description' || text==='/description') { await send(settings.description||'—', chatId); return; }
   581	    return;
   582	  }
   583	
   584	  if (text==='/cancel'){ await adminSessionClear(fromId); await send('Flow annulé.', chatId); return; }
   585	
   586	  if (text==='/admin'){
   587	    if (!Array.isArray(settings.admins)||settings.admins.length===0){ settings.admins=[String(fromId)]; await kv.set('settings', settings); }
   588	    if (!isAdmin(fromId, settings)) { await send('Accès admin requis.', chatId); return; }
   589	    await send('Panneau admin :', chatId, adminRootKb()); return;
   590	  }
   591	
   592	  const sess=await adminSessionGet(fromId);
   593	  if (sess){ await handleAdminFlowStep(msg, sess); return; }
   594	
   595	  await sendHome(chatId);
   596	}
   597	async function handleAdminFlowStep(msg, sess){
   598	  const chatId=msg.chat.id; const userId=msg.from.id;
   599	  if (sess.flow==='add_product'){
   600	    // name -> desc -> q_label -> q_cash -> q_crypto -> q_more -> media -> confirm
   601	    if (sess.step==='name' && msg.text){
   602	      sess.payload.name = msg.text.trim();
   603	      sess.step='desc'; await adminSessionSet(userId,sess);
   604	      await send('Description ?', chatId); return;
   605	    }
   606	    if (sess.step==='desc' && msg.text){
   607	      sess.payload.description = msg.text.trim();
   608	      sess.payload.quantities = []; // start fresh
   609	      sess.step='q_label'; await adminSessionSet(userId,sess);
   610	      await send('Première variante — libellé (ex: 10g, 50g, ...)
   611	Ex: 10g', chatId); return;
   612	    }
   613	    if (sess.step==='q_label' && msg.text){
   614	      const lb = msg.text.trim();
   615	      sess.payload.__cur = { label: lb };
   616	      sess.step='q_cash'; await adminSessionSet(userId,sess);
   617	      await send('Prix cash (€) pour cette variante ?', chatId); return;
   618	    }
   619	    if (sess.step==='q_cash' && msg.text){
   620	      const n = Number(String(msg.text).replace(',','.')); if (!sess.payload.__cur) sess.payload.__cur={};
   621	      sess.payload.__cur.price_cash = isFinite(n)?n:0;
   622	      sess.step='q_crypto'; await adminSessionSet(userId,sess);
   623	      await send('Prix crypto (€) pour cette variante ?', chatId); return;
   624	    }
   625	    if (sess.step==='q_crypto' && msg.text){
   626	      const n = Number(String(msg.text).replace(',','.')); if (!sess.payload.__cur) sess.payload.__cur={};
   627	      sess.payload.__cur.price_crypto = isFinite(n)?n:0;
   628	      // push current
   629	      (sess.payload.quantities ||= []).push(sess.payload.__cur);
   630	      delete sess.payload.__cur;
   631	      sess.step='q_more'; await adminSessionSet(userId,sess);
   632	      await send('Ajouter une autre variante ? (oui/non)', chatId); return;
   633	    }
   634	    if (sess.step==='q_more' && msg.text){
   635	      const t = msg.text.trim().toLowerCase();
   636	      if (['oui','o','yes','y'].includes(t)){
   637	        sess.step='q_label'; await adminSessionSet(userId,sess);
   638	        await send('Libellé de la nouvelle variante ?', chatId); return;
   639	      }
   640	      // sinon -> médias
   641	      sess.step='media'; await adminSessionSet(userId,sess);
   642	      await send('Envoie 1 ou plusieurs photos/vidéos du produit.
   643	Quand c’est bon : ➡️ Terminer.', chatId, kbMedia()); return;
   644	    }
   645	    if (sess.step==='media'){
   646	      let added=0;
   647	      if (msg.photo?.length){ const best=msg.photo[msg.photo.length-1]; const url=await getFileUrl(best.file_id); if (url){ (sess.payload.media ||= []).push({type:'photo', url}); added++; } }
   648	      if (msg.video){ const url=await getFileUrl(msg.video.file_id); if (url){ (sess.payload.media ||= []).push({type:'video', url}); added++; } }
   649	      if (added>0){ await adminSessionSet(userId, sess); await send(`Média ajouté. Total: ${sess.payload.media.length}
   650	Tu peux en ajouter d’autres ou cliquer ➡️ Terminer.`, chatId, kbMedia()); }
   651	      return;
   652	    }
   653	  }
   654	  if (sess.flow==='edit_product'){
   655	    const products=(await kv.get('products'))||[];
   656	
   657	    // --- sélection produit + menu (inchangé) ---
   658	    if (sess.step==='ask_id' && msg.text){
   659	      const q=msg.text.trim().toLowerCase();
   660	      const found=products.find(x => x.id.toLowerCase()===q || x.name.toLowerCase()===q);
   661	      if (!found){ await send('Introuvable. Réessaie avec ID ou nom exact.', chatId); return; }
   662	      sess.payload={ id:found.id };
   663	      sess.step='choose_field';
   664	      await adminSessionSet(userId, sess);
   665	      const kb=[
   666	        [{text:'Nom', callback_data:'admin:edit_field:name'}, {text:'Description', callback_data:'admin:edit_field:description'}],
   667	        [{text:'Unité', callback_data:'admin:edit_field:unit'}],
   668	        [{text:'Prix cash', callback_data:'admin:edit_field:price_cash'}, {text:'Prix crypto', callback_data:'admin:edit_field:price_crypto'}],
   669	        [{text:'Médias', callback_data:'admin:edit_field:media'}],
   670	        [{text:'Quantités', callback_data:'admin:edit_field:quantities'}],
   671	        [{text:'Annuler', callback_data:'cancel'}]
   672	      ];
   673	      await send(`Modifier ${found.name} (${found.id}) — choisis le champ :`, chatId, kb);
   674	      return;
   675	    }
   676	
   677	    // --- simple field edit (inchangé) ---
   678	    if (sess.step==='field_val' && msg.text){
   679	      const idx = products.findIndex(p=>p.id===sess.payload.id);
   680	      if (idx<0){ await send('Introuvable.', chatId); return; }
   681	      const field = sess.payload.field;
   682	      const val = msg.text.trim();
   683	      const p = products[idx];
   684	      if (field==='price_cash' || field==='price_crypto'){ p[field] = Number(val.replace(',','.'))||0; }
   685	      else { p[field] = val; }
   686	      products[idx]=p; await kv.set('products', products);
   687	      await adminSessionClear(userId); await send('✅ Produit modifié.', chatId, adminProductsKb()); return;
   688	    }
   689	
   690	    // --- médias (inchangé) ---
   691	    if (sess.step==='media'){
   692	      let added=0;
   693	      if (msg.photo?.length){ const best=msg.photo[msg.photo.length-1]; const url=await getFileUrl(best.file_id); if (url){ (sess.payload.newMedia ||= []).push({type:'photo', url}); added++; } }
   694	      if (msg.video){ const url=await getFileUrl(msg.video.file_id); if (url){ (sess.payload.newMedia ||= []).push({type:'video', url}); added++; } }
   695	      if (added>0){ await adminSessionSet(userId, sess); await send(`Média ajouté. Nouveaux en attente: ${(sess.payload.newMedia||[]).length}
   696	Tu peux en ajouter d’autres ou ➡️ Terminer.`, chatId, kbMedia()); }
   697	      return;
   698	    }
   699	
   700	    // --- assistant "réécrire les quantités" ---
   701	    if (sess.step==='eq_label' && msg.text){
   702	      (sess.payload.__cur ||= {}); sess.payload.__cur.label = msg.text.trim();
   703	      sess.step='eq_cash'; await adminSessionSet(userId,sess);
   704	      await send('Prix cash (€) ?', chatId); return;
   705	    }
   706	    if (sess.step==='eq_cash' && msg.text){
   707	      const n = Number(String(msg.text).replace(',','.'));
   708	      (sess.payload.__cur ||= {}); sess.payload.__cur.price_cash = isFinite(n)?n:0;
   709	      sess.step='eq_crypto'; await adminSessionSet(userId,sess);
   710	      await send('Prix crypto (€) ?', chatId); return;
   711	    }
   712	    if (sess.step==='eq_crypto' && msg.text){
   713	      const n = Number(String(msg.text).replace(',','.'));
   714	      (sess.payload.__cur ||= {}); sess.payload.__cur.price_crypto = isFinite(n)?n:0;
   715	      (sess.payload.qs ||= []).push(sess.payload.__cur);
   716	      delete sess.payload.__cur;
   717	      sess.step='eq_more'; await adminSessionSet(userId,sess);
   718	      await send('Ajouter une autre variante ? (oui/non)', chatId); return;
   719	    }
   720	    if (sess.step==='eq_more' && msg.text){
   721	      const t = msg.text.trim().toLowerCase();
   722	      if (['oui','o','yes','y'].includes(t)){
   723	        sess.step='eq_label'; await adminSessionSet(userId,sess);
   724	        await send('Libellé de la nouvelle variante ?', chatId); return;
   725	      }
   726	      // appliquer
   727	      const idx = products.findIndex(p=>p.id===sess.payload.id);
   728	      if (idx<0){ await send('Introuvable.', chatId); return; }
   729	      products[idx].quantities = Array.isArray(sess.payload.qs) ? sess.payload.qs : [];
   730	      // on garde unit/price_* existants si tu veux, mais ils ne seront plus utilisés par le front quand quantities existe
   731	      await kv.set('products', products);
   732	      await adminSessionClear(userId); await send('✅ Quantités mises à jour.', chatId, adminProductsKb()); return;
   733	    }
   734	  }
   735	  if (sess.flow==='delete_product'){
   736	    if (sess.step==='ask' && msg.text){
   737	      const q=msg.text.trim().toLowerCase(); const products=(await kv.get('products'))||[];
   738	      const found=products.find(x=>x.id.toLowerCase()===q || x.name.toLowerCase()===q);
   739	      if (!found){ await send('Introuvable. Réessaie avec ID ou nom exact.', chatId); return; }
   740	      await adminSessionSet(userId,{ flow:'delete_product', step:'confirm', payload:{ id:found.id, name:found.name } });
   741	      await send(`Supprimer <b>${found.name}</b> (${found.id}) ?`, chatId, kbConfirm()); return;
   742	    }
   743	  }
   744	
   745	  if (sess.flow==='set_description' && sess.step==='text' && msg.text){
   746	    const settings=(await kv.get('settings'))||{}; settings.description=msg.text; await kv.set('settings', settings);
   747	    await adminSessionClear(userId); await send('✅ Description mise à jour.', chatId, adminTextsKb()); return;
   748	  }
   749	  if (sess.flow==='set_faq' && sess.step==='text' && msg.text){
   750	    const settings=(await kv.get('settings'))||{}; settings.faq=msg.text; await kv.set('settings', settings);
   751	    await adminSessionClear(userId); await send('✅ FAQ mise à jour.', chatId, adminTextsKb()); return;
   752	  }
   753	
   754	  if (sess.flow==='set_logo' && sess.step==='wait_media'){
   755	    if (msg.photo?.length){
   756	      const best=msg.photo[msg.photo.length-1]; const url=await getFileUrl(best.file_id);
   757	      if (url){ const settings=(await kv.get('settings'))||{}; settings.logoUrl=url; await kv.set('settings', settings); await adminSessionClear(userId); await send('✅ Logo mis à jour.', chatId, adminBrandingKb()); return; }
   758	    }
   759	    await send('Envoie une photo pour le logo.', chatId); return;
   760	  }
   761	  if (sess.flow==='set_bg' && sess.step==='wait_media'){
   762	    if (msg.photo?.length){
   763	      const best=msg.photo[msg.photo.length-1]; const url=await getFileUrl(best.file_id);
   764	      if (url){ const settings=(await kv.get('settings'))||{}; settings.bgUrl=url; await kv.set('settings', settings); await adminSessionClear(userId); await send('✅ Fond d’écran mis à jour.', chatId, adminBrandingKb()); return; }
   765	    }
   766	    await send('Envoie une photo pour le fond d’écran.', chatId); return;
   767	  }
   768	  if (sess.flow==='set_name' && sess.step==='ask' && msg.text){
   769	    const settings=(await kv.get('settings'))||{}; settings.shopName=msg.text.trim(); await kv.set('settings', settings);
   770	    await adminSessionClear(userId); await send('✅ Nom de la boutique mis à jour.', chatId, adminBrandingKb()); return;
   771	  }
   772	
   773	  if (sess.flow==='channels' && sess.step==='menu' && msg.text){
   774	    const settings=(await kv.get('settings'))||{}; settings.channels = Array.isArray(settings.channels)?settings.channels:[];
   775	    const t = msg.text.trim();
   776	    if (t.toLowerCase().startsWith('supprimer ')){
   777	      const ch = t.slice(10).trim();
   778	      settings.channels = settings.channels.filter(c=>c!==ch);
   779	      await kv.set('settings', settings);
   780	      await send(`Supprimé: ${ch}\nActuels: ${settings.channels.join(', ')||'(aucun)'}`, chatId);
   781	    } else if (t.startsWith('@')) {
   782	      if (!settings.channels.includes(t)) settings.channels.push(t);
   783	      await kv.set('settings', settings);
   784	      await send(`Ajouté: ${t}\nActuels: ${settings.channels.join(', ')}`, chatId);
   785	    } else if (field==='quantities') {
   786	      // FIXME: removed stray await (was outside async)
   787	      await send('Nouvelle liste de variantes — libellé de la 1ère ?', chatId); 
   788	    } else {
   789	      await send('Format inconnu. Envoie @canal pour ajouter, ou "supprimer @canal".', chatId);
   790	    }
   791	    return;
   792	  }
   793	
   794	  if (sess.flow==='set_contact' && sess.step==='ask' && msg.text){
   795	    const settings=(await kv.get('settings'))||{}; settings.contactUsername=msg.text.replace(/^@/,''); await kv.set('settings', settings);
   796	    await adminSessionClear(userId); await send('✅ Contact mis à jour.', chatId, adminContactKb()); return;
   797	  }
   798	
   799	  if (sess.flow==='admins' && sess.step==='add' && msg.text){
   800	    const id = String(msg.text.trim());
   801	    const settings=(await kv.get('settings'))||{}; settings.admins = Array.isArray(settings.admins)?settings.admins:[];
   802	    if (!settings.admins.includes(id)) settings.admins.push(id);
   803	    await kv.set('settings', settings);
   804	    await adminSessionClear(userId); await send('✅ Admin ajouté.', chatId, adminAdminsKb()); return;
   805	  }
   806	  if (sess.flow==='admins' && sess.step==='remove' && msg.text){
   807	    const id = String(msg.text.trim());
   808	    const settings=(await kv.get('settings'))||{}; settings.admins = (settings.admins||[]).filter(x=>x!==id);
   809	    await kv.set('settings', settings);
   810	    await adminSessionClear(userId); await send('✅ Admin retiré.', chatId, adminAdminsKb()); return;
   811	  }
   812	}
   813	
   814	/** === Rapports (menu + helpers) === **/
   815	function adminReportsKb(){
   816	  return [
   817	    [{ text:'Aujourdhui', callback_data:'admin:reports:range:today' }],
   818	    [{ text:'Semaine',    callback_data:'admin:reports:range:week'  }],
   819	    [{ text:'Mois',       callback_data:'admin:reports:range:month' }],
   820	    [{ text:'Annee',      callback_data:'admin:reports:range:year'  }],
   821	    [{ text:'Retour',     callback_data:'admin:root' }]
   822	  ];
   823	}
   824	function startOfToday(){const tz='Europe/Paris';const now=new Date();const local=new Date(now.toLocaleString('en-US',{timeZone:tz}));local.setHours(0,0,0,0);const offset=local.getTime()-new Date(local.toLocaleString('en-US',{timeZone:'UTC'})).getTime();return local.getTime()-offset;}
   825	function startOfWeek(){const tz='Europe/Paris';const now=new Date();const local=new Date(now.toLocaleString('en-US',{timeZone:tz}));const day=(local.getDay()+6)%7;local.setHours(0,0,0,0);local.setDate(local.getDate()-day);const offset=local.getTime()-new Date(local.toLocaleString('en-US',{timeZone:'UTC'})).getTime();return local.getTime()-offset;}
   826	function startOfMonth(){const tz='Europe/Paris';const now=new Date();const local=new Date(now.toLocaleString('en-US',{timeZone:tz}));local.setHours(0,0,0,0);local.setDate(1);const offset=local.getTime()-new Date(local.toLocaleString('en-US',{timeZone:'UTC'})).getTime();return local.getTime()-offset;}
   827	function startOfYear(){const tz='Europe/Paris';const now=new Date();const local=new Date(now.toLocaleString('en-US',{timeZone:tz}));local.setHours(0,0,0,0);local.setMonth(0,1);const offset=local.getTime()-new Date(local.toLocaleString('en-US',{timeZone:'UTC'})).getTime();return local.getTime()-offset;}
   828	function rangeTs(kind){
   829	  if (kind==='today') return startOfToday();
   830	  if (kind==='week')  return startOfWeek();
   831	  if (kind==='month') return startOfMonth();
   832	  if (kind==='year')  return startOfYear();
   833	  return 0;
   834	}
   835	function fmtEUR(n){ return new Intl.NumberFormat('fr-FR',{style:'currency', currency:'EUR'}).format(Number(n||0)); }
   836	function fmtDate(ts){
   837	  try{
   838	    return new Date(ts||Date.now()).toLocaleString('fr-FR',{timeZone:'Europe/Paris',year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit',second:'2-digit'});
   839	  }catch(_){ return new Date(ts||Date.now()).toISOString(); }
   840	}
   841	function orderLine(o){
   842	  const items = (o?.cart?.items||[]).map(it=>{
   843	    const name = String(it.name||'?');
   844	    const qty  = Number(it.qty||0);
   845	    const tag  = it.variantLabel ? ` (${it.variantLabel})` : (it.unit?` (${it.unit})`:'');
   846	    const pc   = Number(it.price_cash||0);
   847	    const pr   = Number(it.price_crypto||0);
   848	    return `${name}${tag} x ${qty} — Cash: ${pc} / Crypto: ${pr}`;
   849	  }).join(', ') || '(vide)';
   850	  const d=o?.delivery||{};
   851	  const name=[d.firstname||'', d.lastname||''].filter(Boolean).join('\n').trim();
   852	  const addr=[d.address1||'', [d.postalCode||'', d.city||''].filter(Boolean).join('\n'), d.country||''].filter(Boolean).join(', ') || '-';
   853	  return [
   854	    `${o.id} • ${fmtDate(o.ts)}`,
   855	    `Produits: ${items}`,
   856	    `Paiement: ${o.payment||'-'}`,
   857	    `Total: ${fmtEUR(o?.totals?.cash||0)} (cash) • ${fmtEUR(o?.totals?.crypto||0)} (crypto)`,
   858	    `Adresse: ${name?(name+', '):''}${addr}`
   859	  ].join('\n');
   860	};
   861	  const name=[d.firstname||'', d.lastname||''].filter(Boolean).join('\n').trim();
   862	  const addr=[d.address1||'', [d.postalCode||'', d.city||''].filter(Boolean).join('\n'), d.country||''].filter(Boolean).join(', ') || '-';
   863	  return [
   864	    '<b>'+o.id+'</b> • '+fmtDate(o.ts),
   865	    'Produits: '+items,
   866	    'Paiement: '+(o.payment||'-'),
   867	    'Total: '+fmtEUR((o.totals&&o.totals.cash)||0)+' (cash) • '+fmtEUR((o.totals&&o.totals.crypto)||0)+' (crypto)',
   868	    'Adresse: '+(name?name+', ':'')+addr
   869	  ].join('\n');
   870	}
   871	function aggregate(list){let cash=0, crypto=0, count=0;for(let i=0;i<list.length;i++){const o=list[i];if(!o) continue;count++;if(o.payment==="cash"){cash+=Number(o?.totals?.cash||0);}else if(o.payment==="crypto"){crypto+=Number(o?.totals?.crypto||0);}}return {cash,crypto,count};}
   872	async function handleReports(chatId, kind){
   873	  const labels = {today:'Aujourd’hui', week:'Semaine', month:'Mois', year:'Année'};
   874	  const since = rangeTs(kind);
   875	  const v2 = (await kv.get('orders_v2')) || [];
   876	  const v1 = (await kv.get('orders')) || [];
   877	  const seen = new Set();
   878	  const all = [...v1, ...v2].filter(o => {
   879	    if (!o || !o.id) return true;
   880	    if (seen.has(o.id)) return false;
   881	    seen.add(o.id);
   882	    return true;
   883	  });
   884	  const list = all.filter(o => Number(o.ts||0) >= since).sort((a,b)=>Number(b.ts)-Number(a.ts));
   885	
   886	  if (!list.length){
   887	    await send(`Aucune commande pour la période « ${labels[kind]||kind} ».`, chatId, adminReportsKb());
   888	    return;
   889	  }
   890	
   891	  const agg = aggregate(list);
   892	  const header =
   893	    `<b>📈 Rapports — ${labels[kind]||kind}</b>\n` +
   894	    `Total commandes: ${agg.count}\n` +
   895	    `CA: ${fmtEUR(agg.cash)} (cash) • ${fmtEUR(agg.crypto)} (crypto)\n`;
   896	
   897	  let msg = header + '\n' + list.map(orderLine).join('\n\n');
   898	
   899	  const MAX = 3800;
   900	  if (msg.length > MAX) {
   901	    let out = header + '\n';
   902	    for (const line of list.map(orderLine)) {
   903	      if (out.length + line.length + 2 > MAX) break;
   904	      out += line + '\n\n';
   905	    }
   906	    msg = out.trimEnd() + '\n\n…(tronqué)';
   907	  }
   908	
   909	  await send(msg, chatId, adminReportsKb());
   910	}
   911	// === end Reports block ===
   912	
   913	// --- Patch helpers (data only) ---
   914	async function handleVersion(chatId){
   915	  try {
   916	    const codeV = process.env.APP_VERSION || 'n/a';
   917	    const dataV = await currentDataVersion();
   918	    await send(`Code: ${codeV}\nData: ${dataV}`, chatId);
   919	  } catch(e){ await send('Version error: '+(e&&e.message||e), chatId); }
   920	}
   921	async function handleRollback(chatId, adminId, target){
   922	  try {
   923	    const r = await rollback(target, String(adminId));
   924	    await send(`Rollback OK → ${r.restoredTo}`, chatId);
   925	  } catch(e){ await send('Rollback FAIL: '+(e&&e.message||e), chatId); }
   926	}
   927	async function handlePatchDocument(msg){
   928	  const chatId = msg.chat.id; const userId = msg.from.id;
   929	  try {
   930	    const settings = (await kv.get('settings')) || {};
   931	    if (!isAdmin(userId, settings)) { await send('Accès admin requis.', chatId); return; }
   932	
   933	    if (!msg.document || !msg.document.file_id) {
   934	      await send('Patch error: document manquant.', chatId);
   935	      return;
   936	    }
   937	
   938	    await send('Récupération du fichier…', chatId);
   939	    const fid = msg.document.file_id;
   940	    const url = await getFileUrl(fid);
   941	    if (!url) { await send('Patch error: URL de fichier introuvable.', chatId); return; }
   942	
   943	    const buf = await axios.get(url, { responseType:'arraybuffer' }).then(r=>Buffer.from(r.data));
   944	    let manifest;
   945	    try { manifest = JSON.parse(buf.toString('utf8')); }
   946	    catch(e){ await send('Patch error: JSON invalide ('+(e && e.message || e)+')', chatId); return; }
   947	
   948	    await send('Preview en cours…', chatId);
   949	    let p;
   950	    try {
   951	      p = await preview(manifest, PATCH_SECRET);
   952	    } catch(e){
   953	      await send('Patch error (preview): '+prettyErr(e), chatId);
   954	      return;
   955	    }
   956	
   957	    await send(
   958	      'PREVIEW OK\n'
   959	      + (p.summary||'') + '\n'
   960	      + 'Current: '+(p.currentVersion||'?')+'\n'
   961	      + 'Keys: '+((p.willWriteKeys||[]).join(', ')||'(aucune)'),
   962	      chatId
   963	    , null, true);
   964	
   965	    await send('Application du patch…', chatId);
   966	    try {
   967	      await apply(manifest, String(userId), PATCH_SECRET);
   968	    } catch(e){
   969	      await send('Patch error (apply): '+prettyErr(e), chatId);
   970	      return;
   971	    }
   972	
   973	    try {
   974	      const hist = (await kv.get('patch:history')) || [];
   975	      hist.push({ at: Date.now(), from: (p && p.currentVersion)||null, to: manifest.version||null, by: String(userId) });
   976	      await kv.set('patch:history', hist);
   977	    } catch(_) {}
   978	
   979	    await send('Patch applied. Backup: backup:'+String(manifest.version||'?'), chatId);
   980	    await adminSessionSet(userId,{ flow:'patch', step:'applied' });
   981	
   982	    if (manifest.upgrade === true) {
   983	      const ok = await triggerUpgrade();
   984	      await send(ok ? "Code upgrade déclenché (Vercel)" : "Upgrade non déclenché (hook absent ou erreur)", chatId);
   985	    } else if (field==='quantities') {
   986	      // FIXME: removed stray await (was outside async)
   987	      await send('Nouvelle liste de variantes — libellé de la 1ère ?', chatId); 
   988	    } else {
   989	      await send('Tu peux lancer un Upgrade si besoin.', chatId, adminPatchesKb(true));
   990	    }
   991	  } catch(e){
   992	    await send('Patch error: '+prettyErr(e), chatId);
   993	  }
   994	}
   995	
   996	async function handleUpgrade(chatId, adminId){
   997	  const settings = (await kv.get('settings')) || {};
   998	  if (!isAdmin(adminId, settings)) { await send('Accès admin requis.', chatId); return; }
   999	  try {
  1000	    const ok = await triggerUpgrade();
  1001	    await send(ok ? '🚀 Redeploy demandé à Vercel.' : '⚠️ VERCEL_DEPLOY_HOOK_URL manquant ou erreur.', chatId);
  1002	  } catch(e){
  1003	    await send('Upgrade error: ' + (e && e.message || e), chatId);
  1004	  }
  1005	}
  1006	
  1007	async function triggerUpgrade(){
  1008	  try {
  1009	    const url = process.env.VERCEL_DEPLOY_HOOK_URL;
  1010	    if (!url || !/^https?:\/\//.test(url)) return false;
  1011	    await axios.post(url, {}); // simple ping
  1012	    return true;
  1013	  } catch(_) { return false; }
  1014	}
  1015	
  1016	
  1017	
  1018	function adminPatchesKb(showUpgrade){
  1019	  const base = [
  1020	    [{ text:'📥 Appliquer un patch', callback_data:'admin:patch_wait' }],
  1021	    [{ text:'📜 Historique', callback_data:'admin:patch_history' }],
  1022	    [{ text:'🧾 Version', callback_data:'admin:version' }],
  1023	    [{ text:'⬅️ Retour', callback_data:'admin:root' }]
  1024	  ];
  1025	  if (showUpgrade) base.splice(2, 0, [{ text:'🚀 Upgrade', callback_data:'admin:upgrade' }]);
  1026	  return base;
  1027	}
  1028	
